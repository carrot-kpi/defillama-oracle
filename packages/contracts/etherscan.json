{"language":"Solidity","sources":{"src/DefiLlamaOracle.sol":{"content":"pragma solidity 0.8.19;\n\nimport {BaseOracle} from \"carrot/presets/oracles/BaseOracle.sol\";\nimport {ConstantAnswererTrustedOracle} from \"carrot/presets/oracles/ConstantAnswererTrustedOracle.sol\";\nimport {ConstrainedOracle, Constraint} from \"carrot/presets/oracles/ConstrainedOracle.sol\";\nimport {InitializeOracleParams} from \"carrot/commons/Types.sol\";\nimport {IKPIToken} from \"carrot/interfaces/kpi-tokens/IKPIToken.sol\";\n\n/// SPDX-License-Identifier: GPL-3.0-or-later\n/// @title DefiLlama oracle\n/// @dev An oracle template implementation leveraging a trustesd oracle\n/// to bring DefiLlama data on-chain. The smart contract solution is extremely\n/// simple and just allows an external, trusted data source to post data on-chain,\n/// so 100% of the data fetching logic is actually off-chain.\n/// @author Federico Luzzi - <federico.luzzi@protonmail.com>\ncontract DefiLlamaOracle is BaseOracle, ConstrainedOracle, ConstantAnswererTrustedOracle {\n    uint256 public immutable minimumElapsedTime;\n\n    uint256 public measurementTimestamp;\n    string public specification;\n    uint256 public result;\n\n    error InvalidSpecification();\n    error MeasurementTimestampTooClose();\n    error MeasurementTimestampAfterKPITokenExpiration();\n    error TooSoonToFinalize();\n\n    event Initialize(address indexed kpiToken, uint256 indexed templateId);\n    event Finalize(uint256 result);\n\n    /// @dev Initializes the trusted oracle system.\n    /// @param _answerer The address of the trusted entitity that will be allowed to post answers.\n    /// @param _minimumElapsedTime The minimum time that must elapse from the instantiation\n    /// of an oracle to when the final measurement should be taken. If for example we have a\n    /// `_minimumElapsedTime` with value 30, and oracle created at t0 must have a measurement\n    /// timestamp of at least t30.\n    constructor(address _answerer, uint256 _minimumElapsedTime) ConstantAnswererTrustedOracle(_answerer) {\n        minimumElapsedTime = _minimumElapsedTime;\n    }\n\n    /// @dev Initializes the oracle.\n    /// @param _params The params are passed in a struct and are:\n    /// - `creator`: the address of the entity creating the KPI token.\n    /// - `kpiToken`: the address of the KPI token to which the oracle must be linked to.\n    ///   This address is also used to know to which contract to report results back to.\n    /// - `templateId`: the id of the template.\n    /// - `data`: an ABI-encoded structure forwarded by the created KPI token from the KPI token\n    ///   creator, containing the initialization parameters for the oracle template.\n    ///   In particular the structure is formed in the following way:\n    ///     - `string memory specification`: an IPFS cid that points to the specification for\n    ///       the DefiLlama query. The specification is a structured JSON that describes which\n    ///       data to bring on-chain from DefiLlama and how, so that the answerer bot can act\n    ///       as expected.\n    ///     - `uint256 measurementTimestamp`: a timestamp that indicates when the final measurement\n    ///       should be taken and posted on-chain.\n    ///     - `Constraint constraint`: since this is a constrained oracle, this is used to specify\n    ///       the constraint type.\n    ///     - `uint _value0`: since this is a constrained oracle, this is used to specify the first\n    ///       value of the constraint.\n    ///     - `uint _value1`: since this is a constrained oracle, this is used to specify the second\n    ///       value of the constraint.\n    function initialize(InitializeOracleParams memory _params) external payable override initializer {\n        __BaseOracle_init(_params.kpiToken, _params.templateId, _params.templateVersion);\n\n        (\n            string memory _specification,\n            uint256 _measurementTimestamp,\n            Constraint _constraint,\n            uint256 _value0,\n            uint256 _value1\n        ) = abi.decode(_params.data, (string, uint256, Constraint, uint256, uint256));\n\n        __ConstrainedOracle_init(_constraint, _value0, _value1);\n\n        if (bytes(_specification).length == 0) revert InvalidSpecification();\n        if (_measurementTimestamp < block.timestamp + minimumElapsedTime) revert MeasurementTimestampTooClose();\n        if (_measurementTimestamp > IKPIToken(_params.kpiToken).expiration()) {\n            revert MeasurementTimestampAfterKPITokenExpiration();\n        }\n\n        specification = _specification;\n        measurementTimestamp = _measurementTimestamp;\n\n        emit Initialize(_params.kpiToken, _params.templateId);\n    }\n\n    /// @dev Oracle finalization logic. This checks if the measurement timestamp has been reached and\n    /// if the answerer is allowed to post an answer, and if it is, it converts the raw answer value\n    /// to a goal completion percentage according to how the constraint was set in this instance at\n    /// initialization time.\n    function finalize(uint256 _result) external {\n        if (finalized) revert Forbidden();\n        if (block.timestamp < measurementTimestamp) revert TooSoonToFinalize();\n        _checkAnswerer();\n        finalized = true;\n        result = _result;\n        IKPIToken(kpiToken).finalize(_toCompletionPercentage(_result));\n        emit Finalize(_result);\n    }\n\n    /// @dev View function returning all the most important data about the oracle, in\n    /// an ABI-encoded structure.\n    /// @return The ABI-encoded data.\n    function data() external view override returns (bytes memory) {\n        return abi.encode(answerer, constraint, value0, value1, specification, measurementTimestamp, result);\n    }\n}\n"},"lib/carrot/contracts/presets/oracles/BaseOracle.sol":{"content":"pragma solidity >=0.8.0;\n\nimport {IBaseTemplatesManager, Template} from \"../../interfaces/IBaseTemplatesManager.sol\";\nimport {Initializable} from \"oz-upgradeable/proxy/utils/Initializable.sol\";\nimport {IOracle} from \"../../interfaces/oracles/IOracle.sol\";\n\n/// SPDX-License-Identifier: GPL-3.0-or-later\n/// @title BaseOracle contract\n/// @dev A base oracle preset that provides basic but functional\n/// implementations for a set of Carrot oracle functions.\n/// @author Federico Luzzi - <federico.luzzi@protonmail.com>\nabstract contract BaseOracle is IOracle, Initializable {\n    bool public override finalized;\n    address public override kpiToken;\n    address internal oraclesManager;\n    uint128 internal templateVersion;\n    uint256 internal templateId;\n\n    error ZeroAddressKPIToken();\n    error InvalidTemplateId();\n    error InvalidTemplateVersion();\n\n    /// @dev Initializes the internal state of the preset, allowing it to provide\n    /// basic but functional implementations for the most common Carrot oracle functions.\n    /// This function can only be called while initializing an oracle instance. If you\n    /// extend from this contract, make sure you call this, otherwise no state will be\n    /// initialized.\n    /// @param _kpiToken The attached KPI token address (used to initialize the base\n    /// oracle preset).\n    /// @param _templateId The oracle's template id (used to initialize the base\n    /// oracle preset).\n    /// @param _templateVersion The oracle's template version (used to initialize the base\n    /// oracle preset).\n    function __BaseOracle_init(address _kpiToken, uint256 _templateId, uint128 _templateVersion)\n        internal\n        onlyInitializing\n    {\n        if (_kpiToken == address(0)) revert ZeroAddressKPIToken();\n        if (_templateId == 0) revert InvalidTemplateId();\n        if (_templateVersion == 0) revert InvalidTemplateVersion();\n\n        kpiToken = _kpiToken;\n        oraclesManager = msg.sender;\n        templateId = _templateId;\n        templateVersion = _templateVersion;\n    }\n\n    /// @dev Returns the oracle's template as fetched from Carrot's oracles manager, given the\n    /// template's id and version.\n    function template() external view override returns (Template memory) {\n        return IBaseTemplatesManager(oraclesManager).template(templateId, templateVersion);\n    }\n}\n"},"lib/carrot/contracts/presets/oracles/ConstantAnswererTrustedOracle.sol":{"content":"pragma solidity 0.8.19;\n\nimport {Initializable} from \"oz-upgradeable/proxy/utils/Initializable.sol\";\nimport {BaseOracle} from \"./BaseOracle.sol\";\nimport {IOracle} from \"../../interfaces/oracles/IOracle.sol\";\nimport {IKPIToken} from \"../../interfaces/kpi-tokens/IKPIToken.sol\";\nimport {IBaseTemplatesManager, Template} from \"../../interfaces/IBaseTemplatesManager.sol\";\n\n/// SPDX-License-Identifier: GPL-3.0-or-later\n/// @title Constant answerer trusted oracle\n/// @dev A base oracle template implementation that allows an external predefined and constant\n/// answerer to finalize the oracle when it decides the time has come.\n/// @author Federico Luzzi - <federico.luzzi@protonmail.com>\nabstract contract ConstantAnswererTrustedOracle {\n    address public immutable answerer;\n\n    error Forbidden();\n    error ZeroAddressAnswerer();\n\n    /// @dev Sets the trusted answerer.\n    /// @param _answerer The address of the account that will be allowed to finalize\n    /// the oracle (should be chosen with care as it's immutable).\n    constructor(address _answerer) {\n        if (_answerer == address(0)) revert ZeroAddressAnswerer();\n        answerer = _answerer;\n    }\n\n    /// @dev The main function exposed by the oracle preset. This can be used by implementations at\n    /// finalization time to check that any external party submitting an answer is the trusted\n    /// answerer set up at construction time.\n    function _checkAnswerer() internal view {\n        if (msg.sender != answerer) revert Forbidden();\n    }\n}\n"},"lib/carrot/contracts/presets/oracles/ConstrainedOracle.sol":{"content":"pragma solidity >=0.8.0;\n\nimport {Initializable} from \"oz-upgradeable/proxy/utils/Initializable.sol\";\nimport {BaseOracle} from \"./BaseOracle.sol\";\nimport {InitializeOracleParams} from \"../../commons/Types.sol\";\nimport {IKPIToken} from \"../../interfaces/kpi-tokens/IKPIToken.sol\";\nimport {UNIT, INVALID_ANSWER} from \"../../commons/Constants.sol\";\n\nenum Constraint {\n    Between,\n    NotBetween,\n    // range is very similar to between, except the final completion\n    // percentage is determined based on the final absolute result\n    // checking where it landed in the specified range. As an example,\n    // if we have a range constraint with bounds 0 and 10 and the end\n    // result is 5, the goal will be determined to have been 50% completed.\n    Range,\n    GreaterThan,\n    LowerThan,\n    Equal,\n    NotEqual\n}\n\n/// SPDX-License-Identifier: GPL-3.0-or-later\n/// @title ConstrainedOracle contract\n/// @dev An oracle preset that can be initialized with a\n/// constraint on the end result and that transforms the end\n/// result itself in a Carrot-compatible target completion\n/// percentage based on it on finalization.\n/// @author Federico Luzzi - <federico.luzzi@protonmail.com>\nabstract contract ConstrainedOracle is Initializable {\n    uint256 internal constant MULTIPLIER = 64;\n\n    Constraint internal constraint;\n    uint256 internal value0;\n    uint256 internal value1;\n\n    error InvalidConstraint();\n    error InvalidValues();\n    error InvalidRangeBounds();\n    error InvalidGreaterThanConstraintValue();\n    error InvalidLowerThanConstraintValue();\n\n    /// @dev Sets up the constraint on the end result of the oracle based on\n    /// the given parameters. This function can only be called while initializing\n    /// an oracle instance. If you extend from this contract, make sure you call this,\n    /// otherwise no state will be initialized.\n    /// @param _constraint The oracle's constraint type.\n    /// @param _value0 The first value that can be used, in tandem with the constraint type, to specify\n    /// the required constraint. This is always required.\n    /// @param _value1 The second value that can be used, in tandem with the constraint type, to specify\n    /// the required constraint. This is only valid for constraint types that need a range to be applied,\n    /// such as \"between\", \"not between\" and \"range\".\n    function __ConstrainedOracle_init(Constraint _constraint, uint256 _value0, uint256 _value1)\n        internal\n        onlyInitializing\n    {\n        (value0, value1) = _validateConstraint(_constraint, _value0, _value1);\n        constraint = _constraint;\n    }\n\n    /// @dev Checks that the user-given constraint is sane and valid.\n    /// @param _constraint The constraint type.\n    /// @param _value0 The first value that can be used, in tandem with the constraint type, to specify\n    /// the required constraint. This is always required.\n    /// @param _value1 The second value that can be used, in tandem with the constraint type, to specify\n    /// the required constraint. This is only valid for constraint types that need a range to be applied,\n    /// such as \"between\", \"not between\" and \"range\".\n    function _validateConstraint(Constraint _constraint, uint256 _value0, uint256 _value1)\n        private\n        pure\n        returns (uint256, uint256)\n    {\n        if (_value0 == INVALID_ANSWER || _value1 == INVALID_ANSWER) revert InvalidValues();\n\n        if (\n            _constraint == Constraint.Between || _constraint == Constraint.NotBetween || _constraint == Constraint.Range\n        ) {\n            if (_value1 <= _value0) {\n                revert InvalidRangeBounds();\n            }\n            return (_value0, _value1);\n        }\n\n        if (_constraint == Constraint.GreaterThan) {\n            if (_value0 >= INVALID_ANSWER - 1) {\n                revert InvalidGreaterThanConstraintValue();\n            }\n            return (_value0, 0);\n        }\n\n        if (_constraint == Constraint.LowerThan) {\n            if (_value0 == 0) {\n                revert InvalidLowerThanConstraintValue();\n            }\n            return (_value0, 0);\n        }\n\n        if (_constraint == Constraint.Equal || _constraint == Constraint.NotEqual) {\n            // no extra validation is required for the \"equal\" and \"not equal\" constraints\n            // as the only invalid value would be the invalid answer one, which is covered above\n            return (_value0, 0);\n        }\n\n        // we should never arrive here\n        revert InvalidConstraint();\n    }\n\n    /// @dev The main function exposed by the oracle preset. This can be used by implementations at\n    /// finalization time to transform the final value of the oracle to a Carrot-compatible goal\n    /// completion percentage taking into account the constraint.\n    /// @param _result The final value of the oracle.\n    function _toCompletionPercentage(uint256 _result) internal view returns (uint256) {\n        if (_result == INVALID_ANSWER) {\n            return INVALID_ANSWER;\n        }\n\n        Constraint _constraint = constraint;\n        if (_constraint == Constraint.Range) {\n            uint256 _value0 = value0;\n            uint256 _value1 = value1;\n            if (_result <= _value0) return 0;\n            if (_result >= _value1) {\n                return UNIT;\n            } else {\n                uint256 _numerator = ((_result - _value0) * UNIT) << MULTIPLIER;\n                uint256 _denominator = _value1 - _value0;\n                return (_numerator / _denominator) >> MULTIPLIER;\n            }\n        } else if (_constraint == Constraint.Between) {\n            return _result > value0 && _result < value1 ? UNIT : 0;\n        } else if (_constraint == Constraint.NotBetween) {\n            return _result < value0 || _result > value1 ? UNIT : 0;\n        } else if (_constraint == Constraint.GreaterThan) {\n            return _result > value0 ? UNIT : 0;\n        } else if (_constraint == Constraint.LowerThan) {\n            return _result < value0 ? UNIT : 0;\n        } else if (_constraint == Constraint.Equal) {\n            return _result == value0 ? UNIT : 0;\n        } else if (_constraint == Constraint.NotEqual) {\n            return _result != value0 ? UNIT : 0;\n        } else {\n            // we should never arrive here\n            revert InvalidConstraint();\n        }\n    }\n}\n"},"lib/carrot/contracts/commons/Types.sol":{"content":"pragma solidity >=0.8.0;\n\n/// SPDX-License-Identifier: GPL-3.0-or-later\n/// @title Types\n/// @dev General collection of reusable types.\n/// @author Federico Luzzi - <federico.luzzi@protonmail.com>\n\nstruct TokenAmount {\n    address token;\n    uint256 amount;\n}\n\nstruct InitializeKPITokenParams {\n    address creator;\n    address oraclesManager;\n    address kpiTokensManager;\n    address feeReceiver;\n    uint256 kpiTokenTemplateId;\n    uint128 kpiTokenTemplateVersion;\n    string description;\n    uint256 expiration;\n    bytes kpiTokenData;\n    bytes oraclesData;\n}\n\nstruct InitializeOracleParams {\n    address creator;\n    address kpiToken;\n    uint256 templateId;\n    uint128 templateVersion;\n    bytes data;\n}\n"},"lib/carrot/contracts/interfaces/kpi-tokens/IKPIToken.sol":{"content":"pragma solidity >=0.8.0;\n\nimport {InitializeKPITokenParams} from \"../../commons/Types.sol\";\nimport {IKPITokensManager1} from \"../kpi-tokens-managers/IKPITokensManager1.sol\";\nimport {Template} from \"../IBaseTemplatesManager.sol\";\n\n/// SPDX-License-Identifier: GPL-3.0-or-later\n/// @title KPI token interface\n/// @dev KPI token interface.\n/// @author Federico Luzzi - <federico.luzzi@protonmail.com>\ninterface IKPIToken {\n    function initialize(InitializeKPITokenParams memory _params) external payable;\n\n    function finalize(uint256 _result) external;\n\n    function redeem(bytes memory _data) external;\n\n    function owner() external view returns (address);\n\n    function transferOwnership(address _newOwner) external;\n\n    function template() external view returns (Template memory);\n\n    function description() external view returns (string memory);\n\n    function finalized() external view returns (bool);\n\n    function expiration() external view returns (uint256);\n\n    function creationTimestamp() external view returns (uint256);\n\n    function data() external view returns (bytes memory);\n\n    function oracles() external view returns (address[] memory);\n}\n"},"lib/carrot/contracts/interfaces/IBaseTemplatesManager.sol":{"content":"pragma solidity >=0.8.0;\n\nstruct Template {\n    address addrezz;\n    uint128 version;\n    uint256 id;\n    string specification;\n}\n\n/// SPDX-License-Identifier: GPL-3.0-or-later\n/// @title Base templates manager interface\n/// @dev Interface for the base templates manager contract.\n/// @author Federico Luzzi - <federico.luzzi@protonmail.com>\ninterface IBaseTemplatesManager {\n    function addTemplate(address _template, string calldata _specification) external;\n\n    function removeTemplate(uint256 _id) external;\n\n    function upgradeTemplate(uint256 _id, address _newTemplate, string calldata _newSpecification) external;\n\n    function updateTemplateSpecification(uint256 _id, string calldata _newSpecification) external;\n\n    function updateTemplateSpecification(uint256 _id, uint128 _version, string calldata _newSpecification) external;\n\n    function template(uint256 _id) external view returns (Template memory);\n\n    function template(uint256 _id, uint128 _version) external view returns (Template memory);\n\n    function exists(uint256 _id) external view returns (bool);\n\n    function templatesAmount() external view returns (uint256);\n\n    function nextTemplateId() external view returns (uint256);\n\n    function enumerate(uint256 _fromIndex, uint256 _toIndex) external view returns (Template[] memory);\n}\n"},"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"},"lib/carrot/contracts/interfaces/oracles/IOracle.sol":{"content":"pragma solidity >=0.8.0;\n\nimport {IOraclesManager1} from \"../oracles-managers/IOraclesManager1.sol\";\nimport {InitializeOracleParams} from \"../../commons/Types.sol\";\nimport {Template} from \"../IBaseTemplatesManager.sol\";\n\n/// SPDX-License-Identifier: GPL-3.0-or-later\n/// @title Oracle interface\n/// @dev Oracle interface.\n/// @author Federico Luzzi - <federico.luzzi@protonmail.com>\ninterface IOracle {\n    function initialize(InitializeOracleParams memory _params) external payable;\n\n    function kpiToken() external returns (address);\n\n    function template() external view returns (Template memory);\n\n    function finalized() external view returns (bool);\n\n    function data() external view returns (bytes memory);\n}\n"},"lib/carrot/contracts/commons/Constants.sol":{"content":"pragma solidity 0.8.19;\n\nuint256 constant INVALID_ANSWER = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\nuint256 constant UNIT = 1_000_000;\n"},"lib/carrot/contracts/interfaces/kpi-tokens-managers/IKPITokensManager1.sol":{"content":"pragma solidity >=0.8.0;\n\nimport {IBaseTemplatesManager} from \"../IBaseTemplatesManager.sol\";\n\n/// SPDX-License-Identifier: GPL-3.0-or-later\n/// @title KPI tokens manager interface\n/// @dev Interface for the KPI tokens manager contract.\n/// @author Federico Luzzi - <federico.luzzi@protonmail.com>\ninterface IKPITokensManager1 is IBaseTemplatesManager {\n    function predictInstanceAddress(\n        address _creator,\n        uint256 _id,\n        string memory _description,\n        uint256 _expiration,\n        bytes memory _initializationData,\n        bytes memory _oraclesInitializationData\n    ) external view returns (address);\n\n    function instantiate(\n        address _creator,\n        uint256 _templateId,\n        string memory _description,\n        uint256 _expiration,\n        bytes memory _initializationData,\n        bytes memory _oraclesInitializationData\n    ) external returns (address, uint128);\n}\n"},"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"lib/carrot/contracts/interfaces/oracles-managers/IOraclesManager1.sol":{"content":"pragma solidity >=0.8.0;\n\nimport {IBaseTemplatesManager} from \"../IBaseTemplatesManager.sol\";\n\n/// SPDX-License-Identifier: GPL-3.0-or-later\n/// @title Oracles manager interface\n/// @dev Interface for the oracles manager contract.\n/// @author Federico Luzzi - <federico.luzzi@protonmail.com>\ninterface IOraclesManager1 is IBaseTemplatesManager {\n    function predictInstanceAddress(address _creator, uint256 _id, bytes memory _initializationData)\n        external\n        view\n        returns (address);\n\n    function instantiate(address _creator, uint256 _id, bytes memory _initializationData)\n        external\n        payable\n        returns (address);\n}\n"}},"settings":{"remappings":["src/=src/","test/=test/","carrot/=lib/carrot/contracts/","forge-std/=lib/forge-std/src/","oz-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","oz/=lib/openzeppelin-contracts/contracts/","@openzeppelin/contracts/=lib/carrot/lib/openzeppelin-contracts-upgradeable/contracts/","ds-test/=lib/carrot/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/","tests/=lib/carrot/tests/"],"optimizer":{"enabled":true,"runs":1000000},"metadata":{"useLiteralContent":false,"bytecodeHash":"ipfs","appendCBOR":true},"outputSelection":{"*":{"":["ast"],"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"]}},"evmVersion":"paris","viaIR":true,"libraries":{}}}
