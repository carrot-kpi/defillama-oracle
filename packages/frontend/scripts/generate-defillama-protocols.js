#!/usr/bin/env node

import { join, dirname } from "node:path";
import { fileURLToPath } from "node:url";
import { writeFileSync } from "node:fs";

const __dirname = dirname(fileURLToPath(import.meta.url));

const parseProtocol = (protocol) => {
    return {
        label: protocol.name,
        value: protocol.slug,
        logoURL: protocol.logo,
    };
};

const main = async () => {
    const datasetRresponse = await fetch(
        "https://defillama-datasets.llama.fi/lite/protocols2",
    );
    if (!datasetRresponse.ok) throw new Error("could not fetch dataset");
    const { parentProtocols } = await datasetRresponse.json();

    const protocolsResponse = await fetch("https://api.llama.fi/protocols");
    if (!protocolsResponse.ok) throw new Error("could not fetch dataset");
    const protocols = await protocolsResponse.json();

    const parsedProtocols = protocols.map(parseProtocol);

    const parsedParentProtocols = parentProtocols.map((parentProtocol) => {
        const id = parentProtocol.id;
        return {
            label: parentProtocol.name,
            value: id.replace("parent#", ""),
            logoURL: parentProtocol.logo,
        };
    });

    const json = JSON.stringify(
        parsedProtocols.concat(parsedParentProtocols),
        null,
        4,
    );
    const content =
        "// this file is generated by the generate-defillama-protocols script, do not edit\n\n" +
        `interface DefiLlamaProtocol {
    label: string;
    value: string;
    logoURL: string;
}\n\n` +
        `export const DEFILLAMA_PROTOCOLS: DefiLlamaProtocol[] = ${json};\n`;

    writeFileSync(
        join(__dirname, "../src/commons", "defillama-protocols.ts"),
        content,
    );
};

main().then().catch(console.error);
